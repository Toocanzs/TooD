Texture2D<float4> WallBuffer;
RWTexture2D<float4> IrradianceBuffer;
RWTexture2D<float4> CosineWeightedIrradianceBuffer;
RWTexture2D<float4> AverageIrradianceBuffer;
float probeSeparation;
float2 probeAreaStartPosition;//GetProbeAreaOrigin() + OriginOffset
int directionCount;
int maxRayLength;
uint2 wallBufferSize;
uint2 probeCount;
int gutterSize;
float2 _ProbeAreaOrigin;
float HYSTERESIS;
int pixelsPerUnit;
float randomRayOffset;
float2 randomProbeOffset;

float4x4 worldToWallBuffer;
float4x4 worldDirectionToBufferDirection;

#define MAX_DIRECTION_COUNT 128
#define PI 3.14159

struct RaycastResult
{
    float3 color;
    float2 endPosition;
    bool hit;
};

RaycastResult raycast(float2 start, float2 dir) 
{
    
    RaycastResult result;
    result.color = 0;
    result.endPosition = start;
    result.hit = false;
    dir /= max(abs(dir.x), abs(dir.y));
    float2 offsetFromStart = 0;
    for(int i = 0; i < maxRayLength; i++)
    {
        float2 pos = start + offsetFromStart;
        if(any(bool4(pos.xy < 0, pos.xy >= float2(wallBufferSize))))
        {
            return result;
        }
        float4 color = WallBuffer[int2(pos)];
        if(color.a > 0)
        {
            result.color = color.rgb;
            result.hit = true;
            return result;
        }
        offsetFromStart += dir;
        result.endPosition = int2(pos);
    }
    return result;
}

float2 get2DNormal(uint2 pixel) 
{
    float R = WallBuffer[pixel + int2(1, 0)].a;
    float L = WallBuffer[pixel + int2(-1, 0)].a;
    float T = WallBuffer[pixel + int2(0, 1)].a;
    float B = WallBuffer[pixel + int2(0, -1)].a;
    float TL = WallBuffer[pixel + int2(-1, 1)].a;
    float BL = WallBuffer[pixel + int2(-1, -1)].a;
    float TR = WallBuffer[pixel + int2(1, 1)].a;
    float BR = WallBuffer[pixel + int2(1, -1)].a;
    
    //Check for a walls in the 8 nearby pixels, the normal is in the opposite direction of the most walls

    return normalize(float2(
        (BL + TL + L) - (BR + TR + R),
        (BL + BR + B) - (TL + TR + T) 
    ));
}

float4 sampleIrradianceDirection(float2 normal, uint2 probe)
{
    float angle = atan2(normal.y, normal.x);
    int directionIndex = (angle /(2*PI))*directionCount;
    uint2 st = (probe) * uint2(directionCount + gutterSize * 2, 1);
    uint2 directionUV = st + uint2(gutterSize + directionIndex, 0);
    //TODO: needs to get rid of data that is inside walls or not visible from the probe?
    return CosineWeightedIrradianceBuffer[directionUV];
}

#pragma kernel GenerateProbeData
[numthreads(64,1,1)]
void GenerateProbeData (uint3 groupID : SV_GroupID, 
   uint3 groupThreadID : SV_GroupThreadID, 
   uint groupIndex : SV_GroupIndex, 
   uint3 id : SV_DispatchThreadID) 
{
    float2 rayOriginWS = probeAreaStartPosition + float2(id.xy) * probeSeparation;
    rayOriginWS += randomProbeOffset;
    uint2 rowStartPos = id.xy * uint2(directionCount + gutterSize * 2, 1);
    
    float denominator = (0.5/directionCount);
    //only half the rays contribute to a particular direction, so average acoss all those is sum/directionCount/2
    
    float4 sum = 0;
    for(int i = 0; i < directionCount; i++)
    {
        float percent = float(i)/float(directionCount);
        float c, s;
        sincos(2*PI*percent + randomRayOffset, c, s);
        float2 dirI = float2(c, s);
        float2 rayDir = normalize(mul(worldDirectionToBufferDirection, float4(dirI, 0, 0))).xy;//Dir in buffer space
        float2 rayOrigin = mul(worldToWallBuffer, float4(rayOriginWS, 0, 1)).xy;
        //do raycast
        RaycastResult result = raycast(rayOrigin, rayDir);
        float2 wsEndPos = result.endPosition.xy / pixelsPerUnit + _ProbeAreaOrigin;

        float3 col = 0;
        if(result.hit)
        {
            float2 normal = get2DNormal(result.endPosition);
            float2 localPos = (wsEndPos - probeAreaStartPosition)/ probeSeparation;
            
            uint2 BLProbe = (uint2)(localPos);
            
            float2 f = frac(localPos);
            float4 BL = sampleIrradianceDirection(normal, BLProbe);
            float4 BR = sampleIrradianceDirection(normal, BLProbe + uint2(1,0));
            float4 TL = sampleIrradianceDirection(normal, BLProbe + uint2(0,1));
            float4 TR = sampleIrradianceDirection(normal, BLProbe + uint2(1,1));
            float4 bottom = lerp(BL, BR, f.x);
            float4 top = lerp(TL, TR, f.x);
            float4 combined = lerp(bottom, top, f.y);//fix with depth later
            
            float dist = distance(wsEndPos, rayOriginWS) * 0.2;
        
            float3 bounceColor = combined.rgb * 4 * 0;
            float3 rayColor = result.color;
            col = rayColor + bounceColor;
            col /= 1+dist;
        }

        uint2 offset = rowStartPos + uint2(gutterSize + i, 0);
        float4 newCol = float4(col,1);
        IrradianceBuffer[offset] = newCol;
        sum += newCol;
    }
    AverageIrradianceBuffer[id.xy] = sum / float(directionCount);
 }

#pragma kernel GenerateCosineWeighted
[numthreads(64,1,1)]
void GenerateCosineWeighted (uint3 groupID : SV_GroupID, 
   uint3 groupThreadID : SV_GroupThreadID, 
   uint groupIndex : SV_GroupIndex, 
   uint3 id : SV_DispatchThreadID) 
{
    float2 rayOriginWS = probeAreaStartPosition + float2(id.xy) * probeSeparation;
    uint2 rowStartPos = id.xy * uint2(directionCount + gutterSize * 2, 1);
    
    float denominator = (0.5/directionCount);
    //only half the rays contribute to a particular direction, so average acoss all those is sum/directionCount/2
    for(int i = 0; i < directionCount; i++)
    {
        uint2 inputDirectionOffset = rowStartPos + uint2(gutterSize + i, 0);
        float percent = float(i)/float(directionCount);
        float c, s;
        sincos(2*PI*percent + randomRayOffset, c, s);
        float2 dirI = float2(c, s);
        
        float4 sum = 0;
        for(int j = 0; j < directionCount; j++)
        {
            float percentJ = float(j)/float(directionCount);
            sincos(2*PI*percentJ, c, s);
            float2 dirJ = float2(c, s);
            uint2 otherDirectionOffset = rowStartPos + uint2(gutterSize + j, 0);
            float4 col = IrradianceBuffer[otherDirectionOffset];
            sum += col * max(0, dot(dirI, dirJ)) * denominator;
        }
        CosineWeightedIrradianceBuffer[inputDirectionOffset] = lerp(CosineWeightedIrradianceBuffer[inputDirectionOffset], sum, HYSTERESIS);
        //CosineWeightedIrradianceBuffer[inputDirectionOffset] = sum;
    }
}

#pragma kernel FillGutter
[numthreads(64,1,1)]
void FillGutter (uint3 groupID : SV_GroupID, 
   uint3 groupThreadID : SV_GroupThreadID, 
   uint groupIndex : SV_GroupIndex, 
   uint3 id : SV_DispatchThreadID) 
{
    uint2 rowStartPos = id.xy * uint2(directionCount + gutterSize * 2, 1);
    uint2 gutterSpotOne = rowStartPos;
    uint2 gutterSpotTwo = rowStartPos + uint2(gutterSize + directionCount, 0);
    CosineWeightedIrradianceBuffer[gutterSpotOne] = CosineWeightedIrradianceBuffer[gutterSpotTwo - uint2(1,0)];
    CosineWeightedIrradianceBuffer[gutterSpotTwo] = CosineWeightedIrradianceBuffer[gutterSpotOne + uint2(1,0)];
}

RWTexture2D<float4> FullScreenAverage;

#pragma kernel CopyToFullscreen
[numthreads(64,1,1)]
void CopyToFullscreen (uint3 groupID : SV_GroupID, 
   uint3 groupThreadID : SV_GroupThreadID, 
   uint groupIndex : SV_GroupIndex, 
   uint3 id : SV_DispatchThreadID) 
{
    float probeOver2 = probeSeparation/2;
    float2 probeOffset = randomProbeOffset;
    
    float2 idOffset = float2(id.xy) - randomProbeOffset * pixelsPerUnit * probeSeparation;
    
    uint2 BL = ((float2(idOffset)) / float(probeSeparation * pixelsPerUnit)) - probeOver2;
    uint2 BR = BL + uint2(1,0);
    uint2 TL = BL + uint2(0,1);
    uint2 TR = BL + uint2(1,1);
    
    float2 f = float2(idOffset - ((float2(BL) + probeOver2) * (probeSeparation * pixelsPerUnit))) / (probeSeparation * pixelsPerUnit);
    
    float4 top = lerp(AverageIrradianceBuffer[TL], AverageIrradianceBuffer[TR], f.x);
    float4 bottom = lerp(AverageIrradianceBuffer[BL], AverageIrradianceBuffer[BR], f.x);
    float4 combined = lerp(bottom, top, f.y);
    
    FullScreenAverage[id.xy] = lerp(FullScreenAverage[id.xy], combined, HYSTERESIS);
}